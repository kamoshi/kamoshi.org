---
import Base from "../../layouts/Base.astro";
import { CollectionEntry, getCollection } from "astro:content";
import { ALBUMS } from "../../utils/songs";

export async function getStaticPaths() {
  return (await getCollection('songs'))
    .map(song => Object.keys(song.data.album)
      .map(cat => ({ params: {slug: `${cat}/${song.slug}`}, props: {song, cat} })))
    .flat()
}


interface Props {
  cat: string;
  song: CollectionEntry<'songs'>;
}

const { cat, song } = Astro.props;
const { Content } = await song.render();

const metadata = {
  ...song.data,
  ...song.data.album[cat],
  ...ALBUMS[cat],
}

/** Other versions of this song */
const other = Object.keys(song.data.album)
  .filter(other => other != cat)
  .map(cat => ({ cat, title: ALBUMS[cat].title }));
---

<Base>
  <main class="l-songs-song">
    <article class="l-songs-song__page">
      <header class="p-header">
        <h1 class="p-header__heading">{song.data.title}</h1>
      </header>
      <Content />
    </article>

    <aside class="l-songs-song__meta p-song-meta">
      <h2>Metadata</h2>
      <div>{metadata.circle}</div>
      <div>{metadata.title}</div>
      <div>{cat}</div>
      <div>Track {metadata.track}</div>
      <div>Composer: {metadata.composer}</div>
      <div>Lyrics: {metadata.lyrics}</div>
      {metadata.vocal && (
        <div>
          Vocal:
          <ul>
            {metadata.vocal.map(vocalist => <li>{vocalist}</li>)}
          </ul>
        </div>
      )}
    </aside>
  </main>
</Base>
