---
import { PageTree, pathify } from "@utils/tree";
import { Maybe } from "purify-ts";


export interface PagesProps {
  tree: PageTree;
  slug: Maybe<string>;
  prefix: Maybe<string>;
}


type Props = PagesProps;
const { tree, slug, prefix } = Astro.props;

function compare(a: {title: string}, b: {title: string}) {
  return a.title.localeCompare(b.title, "en", {
    numeric: true,
    sensitivity: "base",
  });
}

function checkCurrent(checked: Maybe<string>)  {
  return Maybe
    .sequence([checked, slug])
    .mapOrDefault(([a, b]) => a == pathify(b), false)
}
---

{tree.children
  .map(m => Object.values(m))
  .filter(xs => xs.length > 0)
  .map(pages => 
    <ul class="link-tree__nav-list">
      {pages
        .sort(compare)
        .map(page => ({...page, current: checkCurrent(page.slug) }))
        .map(page => 
          <li class="link-tree__nav-list-item">
            {page.slug
              .chain(slug => prefix.map(prefix => pathify(prefix, slug)))
              .map(href => (page.current)
                ? <button class="link-tree__nav-list-text current">{page.title}</button>
                : <a class="link-tree__nav-list-text link" href={href}>{page.title}</a>
              )
              .orDefault(<span class="link-tree__nav-list-text">{page.title}</span>)}
            <Astro.self tree={page} slug={slug} prefix={prefix} />
          </li>
      )}
    </ul>
).extract()}


